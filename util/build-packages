#!/usr/bin/env bash

# Bail out on errors, be strict
set -ue

# ############################################################################
# Standard startup, find the branch's root directory
# ############################################################################

exit_status=0

die() {
   echo "$1" >&2
   exit 1
}

warn() {
   echo "$1" >&2
   exit_status=1
}

if [ -n "$PERCONA_TOOLKIT_BRANCH" ]; then
   BRANCH=$PERCONA_TOOLKIT_BRANCH
   cd $BRANCH
else
   while [ ! -f Makefile.PL ] && [ $(pwd) != "/" ]; do
      cd ..
   done
   if [ ! -f Makefile.PL ]; then
      die "Cannot find the root directory of the Percona Toolkit branch"
      exit 1
   fi
   BRANCH=`pwd`
fi

# ############################################################################
# Paths
# ############################################################################

DOCS=$BRANCH/docs
DEB=$BRANCH/config/deb
RPM=$BRANCH/config/rpm
RELEASE=$BRANCH/release

# ############################################################################
# Programs and their options
# ############################################################################

TAR=${TAR:-tar}

# ############################################################################
# Subroutines
# ############################################################################

check_branch() {
   echo -n "Checking branch... "
   local clean_branch=$(bzr version-info --check-clean | grep -i 'clean: True')
   if [ -z "$clean_branch" ]; then
      die "The branch has uncommitted changes or unknown files"
   fi
   echo "OK"
}

check_version() {
   echo -n "Checking new version $VERSION... "
   cd $BRANCH
   local current_version=$(expr `cat Makefile.PL | grep VERSION | awk '{print $3}'` : "'\([0-9.]*\)'")
   if ! [ "$VERSION" '>' "$current_version" ]; then
      die "New version $VERSION is not greater than current version $current_version"
   fi
   echo "OK"
}

update_version() {
   echo -n "Updating version in tools... "
   cd $BRANCH/bin

   local new_version_str="Percona Toolkit v$VERSION released $DATE"

   for tool_file in *; do
      sed -i'.bak' -e "s/^Percona Toolkit v.*/$new_version_str/" $tool_file
      if [ $? -ne 0 ]; then
         die "Error updating version in $tool_file"
      fi
      rm "$tool_file.bak"
   done

   local new_versions=$(grep --no-filename '^Percona Toolkit v' * | sort -u)
   if [ "$new_versions" != "$new_version_str" ]; then
      die "The version in some tool did not update correctly"
   fi
   echo "OK"

   echo -n "Updating version in Makefile.PL... "
   cd $BRANCH
   sed -i'.bak' -e "s/'[0-9.]*'/'$VERSION'/" Makefile.PL
   if [ $? -ne 0 ]; then
      die "Error updating version in Makefile.PL"
   fi
   rm "Makefile.PL.bak"
   echo "OK"   
}

update_copyright_year() {
   echo -n "Updating copyright year in tools... "
   cd $BRANCH/bin
   for tool_file in *; do
      local copyright=$(grep "[0-9] Percona Inc." $tool_file);
      local new_copyright=$(../util/new-copyright-year $YEAR "$copyright")
      if [ $? -ne 0 ]; then
         die "Error parsing copyright year in $tool_file"
      fi
      sed -i'.bak' -e "s/^$copyright/$new_copyright/" $tool_file
      if [ $? -ne 0 ]; then
         die "Error updating copyright year in $tool_file"
      fi
      rm "$tool_file.bak"
   done
   echo "OK"

   echo -n "Updating copyright year in percona-toolkit.pod..."
   local pod=$DOCS/percona-toolkit.pod
   local copyright=$(grep "[0-9] Percona Inc." $pod)
   local new_copyright=$(../util/new-copyright-year $YEAR "$copyright")
   if [ $? -ne 0 ]; then
      die "Error parsing copyright year in percona-toolkit.pod"
   fi
   sed -i'.bak' -e "s/^$copyright/$new_copyright/" $pod
   if [ $? -ne 0 ]; then
      die "Error updating copyright year in percona-toolkit.pod"
   fi
   rm $pod.bak
   echo "OK"
}

update_manifest() {
   echo -n "Updating MANIFEST... "
   cd $BRANCH
   echo -n > MANIFEST
   for file in *; do
      if [ -f $file ]; then
         echo $file >> MANIFEST
      fi
   done
   find bin  -type f -depth 1 >> MANIFEST
   find docs -type f -depth 1 >> MANIFEST
   echo "OK"
}

update_percona_toolkit_pod() {
   echo -n "Updating TOOLS section in percona-toolkit.pod: "
   cd $BRANCH/bin
   local pod=$DOCS/percona-toolkit.pod
   local tool_list=/tmp/percona-tool-list.pod

   echo "=head1 TOOLS

This release of Percona Toolkit includes the following tools:

=over
" > $tool_list

   for tool in *; do
      desc=$(grep -A 2 '^=head1 NAME' $tool | tail -n 1 | sed 's/ - /:/' | cut -d':' -f2)
      echo "=item $tool

$desc
" >> $tool_list
   done

   echo "=back

For more free, open-source software developed Percona, visit
L<http://www.percona.com/software/>.
" >> $tool_list

   cat $pod | ../util/replace-text -v from='^=head1 TOOLS' -v file=$tool_list -v to='^=head1' > $pod.tmp
   rm $tool_list

   if [ -z "$(podchecker $pod.tmp 2>&1 | grep -i 'pod syntax OK')" ]; then
      die "POD syntax errors; run podchecker $pod.tmp"
   fi

   mv $pod.tmp $pod
   echo "OK"
}

prep_release_dir() {
   echo -n "Preparing release directory: "
   cd $BRANCH
   if [ ! -d $RELEASE ]; then
      mkdir $RELEASE
   elif [ -d $RELEASE/$PKG ]; then
      rm -rf $RELEASE/$PKG
   fi
   (
      cd $RELEASE
      mkdir -p $PKG $PKG/bin $PKG/docs $PKG/lib
   )
   for file in `cat MANIFEST`; do
      cp $file $RELEASE/$PKG/$file
   done
   echo "OK"
}

build_tar() {
   echo -n "Building $PKG.tar.gz: "
   cd $RELEASE
   $TAR czf "$PKG.tar.gz" $PKG
   echo "OK"
}

build_rpm() {
   echo -n "Building $PKG-1.noarch.rpm: "
   cd $RELEASE
   if [ ! -f "$PKG.tar.gz" ]; then
      die "Cannot build RPM because $PKG.tar.gz does not exist"
   fi
   mkdir -p rpm rpm/BUILD rpm/SOURCES rpm/RPMS rpm/SRPMS
   cd rpm
   local topdir=`pwd`
   # Build RPM package from the tarball
   rpmbuild --define "_topdir $topdir" -ta ../$PKG.tar.gz
   echo "OK"
}

build_deb() {
   :
}

# ############################################################################
# Script starts here
# ############################################################################

if [ $# -eq 0 ]; then
   die "Usage: $0 VERSION"
fi

YEAR=$(date -u +'%Y')          # for updating copyright year
DATE=$(date -u +'%F')          # for updating release date
VERSION=$1                     # for PKG 
PKG="percona-toolkit-$VERSION" # what we're building

# This script does not check that you've done pre-release tasks like running
# the test suite, updating Changelog entries, etc.  You're responsible for
# that.  These checks are for the sanity of package building.
CHECK=${CHECK:-1}
if [ $CHECK -eq 1 ]; then
   check_branch
   check_version
fi

# These items need to be updated automatically for each release.
UPDATE=${UPDATE:-1}
if [ $UPDATE -eq 1 ]; then
   update_version
   update_copyright_year
   update_manifest
   update_percona_toolkit_pod
fi

# Now that those ^ items are updated, you need to commit and push one more
# time before the release packages are built.  This script can't do that
# because your branch could non-standard.
cat <<MSG

Branch verified and updated; ready to build $PKG,
but first you must:

  1. bzr diff and review the changes (Changelog, percon-toolkit.pod, etc.)
  2. bzr commit -m "Build $PKG"
  3. bzr push

Press any key to continue... (or Ctrl-C to abort)
MSG
read

# Build the release packages.
BUILD=${BUILD:-1}
if [ $BUILD -eq 1 ]; then
   prep_release_dir

   BUILD_TAR=${BUILD_TAR:-1}
   if [ $BUILD_TAR -eq 1 ]; then
      build_tar
   fi

   BUILD_RPM=${BUILD_RPM:-1}
   if [ $BUILD_RPM -eq 1 ]; then
      build_rpm
   fi
   
   BUILD_DEB=${BUILD_DEB:-1}
   if [ $BUILD_DEB -eq 1 ]; then
      build_deb
   fi
fi

exit $exit_status
